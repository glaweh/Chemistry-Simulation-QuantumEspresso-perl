#!/usr/bin/perl
use strict;
use Getopt::Std;

my $column_seperator="\n";
# -----------------------------------------------------------------
#                        Extractors
# Extract energy
sub extract_E {
	my $fh = shift;
	# --- matching line: ---
	# !    total energy              =  -150.90270828 ryd
	my @E = map { my @l=split; $l[4] } grep (/^!/,<$fh>);
	return @E;
}
# Extract forces
sub extract_F {
	my $fh = shift;
	my @F;
	my @block=();
	my $trigger=0;
	# --- matching block: ---
	#
	#      atom   1 type  1   force =     0.01955501    0.02827548    0.00185099
	#      atom   2 type  2   force =     0.00248174   -0.02624067    0.10253621
	#      atom   3 type  2   force =    -0.02203676   -0.00203481   -0.10438720
	#
	while (<$fh>) {
		if (m#atom\s+\d+ type\s+\d+\s+force =(.*)$#) {
			$trigger=1;
			$_=$1;
			push @block,split;
		} elsif ($trigger) {
			$trigger=0;
			push @F,join($column_seperator,@block);
			@block=();
		}
	}
	return @F;
}
# Extract stress
sub extract_S {
	my $fh=shift;
	my @S;
	my $trigger=0;
	my @block=();
	# --- matching block: ---
	#
	#          total   stress  (ryd/bohr**3)                  (kbar)     P=  -66.79
	#  -0.00041355   0.00000101  -0.00006949        -60.84      0.15    -10.22
	#   0.00000101  -0.00038236   0.00006165          0.15    -56.25      9.07
	#  -0.00006949   0.00006165  -0.00056612        -10.22      9.07    -83.28
	#
	while (<$fh>) {
		if ($trigger) {
			if (m#^\s*$#){
				$trigger=0;
				push @S,join($column_seperator,@block);
				@block=();
			} else {
				push @block,split;
				$#block-=3;
			}
		}
		$trigger ||= m#total   stress#;
	};
	return @S;
}
# extract Fermi energy
sub extract_Ef {
	my $fh=shift;
	my @Ef;
	while (<$fh>) {
		m#Fermi energy is\s+(\S+) ev$# and push @Ef,$1;
	}
	return @Ef;
}
# extract phonon frequencies
sub extract_omega {
	my $fh=shift;
	my @omega;
	# match:   omega( 1) =      -2.614365 [THz] =     -87.206422 [cm-1]
	while (<$fh>) {
		m#^\s+omega.*=\s*([0-9.-]+) \[cm-1\]# and push @omega,$1;
	}
	return join($column_seperator,@omega);
}

# usage
sub usage {
	print STDERR "usage: $0 -d <datatype> <-r searchfilename | filename [filename] ...>
	where <datatype> is one of:
		E  - Total energy
		Ef - Fermi energy
		S  - stress tensor
		F  - forces
		p  - phonon frequencies
	Options:
		-r searchfilename - run recursively, search for files name 'searchfilename'\n";
	exit -1;
}

# ------------------------------------------------------------------------------------
#   Main program
# ------------------------------------------------------------------------------------

our ($opt_d,$opt_r);
# coderef list of all extractors
my %extract = (
	E => \&extract_E,
	F => \&extract_F,
	S => \&extract_S,
	Ef => \&extract_Ef,
	p => \&extract_omega
	);

getopts("d:r:");
usage() unless ($opt_d);
my $extract=$extract{$opt_d};

my @filelist;

if ($opt_r) {
	opendir PWD,".";
	@filelist = grep { -f $_ } map { "$_/$opt_r" } readdir(PWD);
	closedir PWD;
} else {
	@filelist = @ARGV;
}
$column_seperator=" " if (@filelist>1);

my %result;
foreach my $filename (@filelist) {
	$filename =~ m#([^/]+)/[^/]+$#;
	my $dir = $1;

	my $result_fh;
	open $result_fh,"$filename";
	my @RES = &$extract($result_fh);
	$result{$dir}=$RES[-1] if (@RES);
	close $result_fh;
}

foreach (sort { $a <=> $b} keys %result) {
	my $prefix='';
	$prefix = "$_$column_seperator" if (@filelist>1);
	print "$prefix$result{$_}\n" unless ($result{$_} eq '');
}
